# -*- mode: ruby -*-
# vi: set ft=ruby :

# Change to true if you want to have Kubernetes ready to work.
auto = ENV['AUTO_START_K8S'] || true

# Increase numworkers if you want more nodes or nummasters beside main one
nummasters = 2
numworkers = 3

# Master memory and CPU configuration
vmmemory = 2048
numcpu = 4

mains = []
instances = []

(1..nummasters).each do |m|
  mains.push({:name => "k8sm#{m+1}", :ipm => "192.168.63.#{m+2}", :ipp => "192.168.50.#{m+238}"})
end

(1..numworkers).each do |n|
  instances.push({:name => "k8snode#{n}", :ip => "192.168.63.#{n+10}"})
end

manager_ip = "192.168.63.2"
manager_hostname = "k8sm1"
vip = "192.168.63.200"

File.open("./hosts", 'w') { |file|
  file.write("#{manager_ip} #{manager_hostname} #{manager_hostname}\n")
  mains.each do |m|
    file.write("#{m[:ipm]} #{m[:name]} #{m[:name]}\n")
  end
  instances.each do |i|
    file.write("#{i[:ip]} #{i[:name]} #{i[:name]}\n")
  end
  file.write("#{vip} kube-api-server kube-api-server\n")
}

# Old proxy configuration
# http_proxy = ""
# Proxy configuration
# if ENV['http_proxy']
#       http_proxy = ENV['http_proxy']
#         https_proxy = ENV['https_proxy']
# end

# no_proxy = "localhost,127.0.0.1,#{manager_ip}"
# instances.each do |instances|
#     no_proxy += ",#{instances[:ip]}"
# end

Vagrant.configure("2") do |config|
    config.vm.define "k8sm1" do |i|
      i.vm.provider :libvirt do |libvirt|
        libvirt.cpus = "#{numcpu}"
        libvirt.memory = "#{vmmemory}"
        libvirt.nested = true
        libvirt.driver = "kvm"
        libvirt.cpu_mode = "host-passthrough"
        libvirt.disk_bus = "virtio"
        libvirt.disk_driver :cache => "writeback"
        libvirt.machine_type = "q35"
        libvirt.nic_model_type = "virtio"
      end
      i.vm.box = "roboxes-x64/debian12"
      i.vm.hostname = "#{manager_hostname}"

      i.vm.network :public_network,
        :dev => "br0",
        :mode => "bridge",
        :type => "bridge",
        :ip => "192.168.50.238",
        :autostart => "true"

      i.vm.network :private_network, :ip => "#{manager_ip}", :autostart => "true"
      i.vm.synced_folder ".", "/vagrant",
      # owner: "vagrant", group: "vagrant", nfs_udp: false
        type: "nfs",
        nfs_version: 4,
        nfs_udp: false
      if File.file?("./hosts")
        i.vm.provision "file", source: "hosts", destination: "/tmp/hosts"
        i.vm.provision "shell", inline: "cat /tmp/hosts >> /etc/hosts", privileged: true
      end

      i.vm.provision "shell", inline: "mkdir -p /home/vagrant/.ssh/"
      i.vm.provision "file", source: "../ansible/ansible.pub", destination: "/home/vagrant/.ssh/ansible.pub"
      i.vm.provision "shell", inline: "cat /home/vagrant/.ssh/ansible.pub >> /home/vagrant/.ssh/authorized_keys"

      i.vm.provision :ansible do |ansible|
        ansible.verbose = "vv"
        ansible.compatibility_mode = "2.0"
    #    ansible.extra_vars = { "ansible_python_interpreter" => "/usr/bin/python3" }
        ansible.playbook = "/home/madmin/kvmvagrant/ansible/playbook.yml"
      end

      i.vm.provision "shell", path: "./provision.sh", run: "once"

      if auto
        i.vm.provision "shell", path: "./provisionk8s.sh", run: "once"
        i.vm.provision "shell", path: "./provisionk8smaster.sh", run: "once"
      end
    end

mains.each do |mains|
    config.vm.define mains[:name] do |m|
      m.vm.provider :libvirt do |lv|
          lv.cpus = "#{numcpu}"
          lv.memory = "#{vmmemory}"
          lv.nested = true
          lv.driver = "kvm"
          lv.cpu_mode = "host-passthrough"
          lv.disk_bus = "virtio"
          lv.disk_driver :cache => "writeback"
          lv.machine_type = "q35"
          lv.nic_model_type = "virtio"
      end
      m.vm.box = "roboxes-x64/debian12"
      m.vm.hostname = mains[:name]
      m.vm.network :public_network,
        :dev => "br0",
        :mode => "bridge",
        :type => "bridge",
        :ip => "#{mains[:ipp]}",
        :autostart => "true"

      m.vm.network :private_network, ip: "#{mains[:ipm]}"
      m.vm.synced_folder ".", "/vagrant",
      # owner: "vagrant", group: "vagrant", nfs_udp: false
        type: "nfs",
        nfs_version: 4,
        nfs_udp: false

      m.vm.provision "shell", inline: "mkdir -p /home/vagrant/.ssh/"
      m.vm.provision "file", source: "../ansible/ansible.pub", destination: "/home/vagrant/.ssh/ansible.pub"
      m.vm.provision "shell", inline: "cat /home/vagrant/.ssh/ansible.pub >> /home/vagrant/.ssh/authorized_keys"
 
      if File.file?("./hosts")
        m.vm.provision "file", source: "hosts", destination: "/tmp/hosts"
        m.vm.provision "shell", inline: "cat /tmp/hosts >> /etc/hosts", privileged: true
      end
 
      m.vm.provision :ansible do |ansible|
        ansible.verbose = "vv"
        ansible.compatibility_mode = "2.0"
     #   ansible.extra_vars = { "ansible_python_interpreter" => "/usr/bin/python3" }
        ansible.playbook = "/home/madmin/kvmvagrant/ansible/playbook.yml"
      end

      m.vm.provision "shell", path: "./provision.sh", run: "once"

    #  If you forgot about vagrant up --no-parallel
      m.vm.provision "shell", inline: "sleep 10"
 
      if auto
        m.vm.provision "shell", path: "./provisionk8s.sh", run: "once"
        m.vm.provision "shell", inline: "cp -r /vagrant/kube-vip.yaml /etc/kubernetes/manifests/kube-vip.yaml", run: "once"
        m.vm.provision "shell", inline: "kubeadm join kube-api-server:6443 --token $(cat /vagrant/kubeadm_join) --discovery-token-ca-cert-hash sha256:$(cat /vagrant/ca_cert_hash) --control-plane --certificate-key $(cat /vagrant/cert_key) --apiserver-advertise-address #{mains[:ipm]} --apiserver-bind-port 6443", run: "once"
      end
end
end

instances.each do |instances|
    config.vm.define instances[:name] do |i|
      i.vm.provider :libvirt do |lv|
          lv.cpus = "#{numcpu}"
          lv.memory = "#{vmmemory}"
          lv.nested = true
          lv.driver = "kvm"
          lv.cpu_mode = "host-passthrough"
          lv.disk_bus = "virtio"
          lv.disk_driver :cache => "writeback"
          lv.machine_type = "q35"
          lv.nic_model_type = "virtio"
      end
      i.vm.box = "roboxes-x64/debian12"
      i.vm.hostname = instances[:name]
      
      i.vm.network :private_network, ip: "#{instances[:ip]}"
      i.vm.synced_folder ".", "/vagrant",
      # owner: "vagrant", group: "vagrant", nfs_udp: false
        type: "nfs",
        nfs_version: 4,
        nfs_udp: false
 
      if File.file?("./hosts")
        i.vm.provision "file", source: "hosts", destination: "/tmp/hosts"
        i.vm.provision "shell", inline: "cat /tmp/hosts >> /etc/hosts", privileged: true
      end
 
      i.vm.provision :ansible do |ansible|
        ansible.verbose = "vv"
        ansible.compatibility_mode = "2.0"
     #   ansible.extra_vars = { "ansible_python_interpreter" => "/usr/bin/python3" }
        ansible.playbook = "/home/madmin/kvmvagrant/ansible/playbook.yml"
      end

      i.vm.provision "shell", path: "./provision.sh", run: "once"

      # If you forgot about vagrant up --no-parallel
      i.vm.provision "shell", inline: "sleep 10"
 
      if auto
        i.vm.provision "shell", path: "./provisionk8s.sh", run: "once"
        i.vm.provision "shell", inline: "kubeadm join #{manager_ip}:6443 --token $(cat /vagrant/kubeadm_join) --discovery-token-ca-cert-hash sha256:$(cat /vagrant/ca_cert_hash)", run: "once"
      end
end
end
end
